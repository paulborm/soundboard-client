{"version":3,"sources":["context/socketContext.js","hooks/useSocket.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","process","API_URL","SocketContext","createContext","useSocket","useContext","App","playAudio","path","audio","Audio","src","play","handleOnClickStream","id","emit","soundId","useEffect","console","log","on","data","chunk","audioChunks","push","window","btoa","className","type","onClick","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","children","Provider","value","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oNAGMA,E,MAASC,GAAGC,mHAAYC,SAAW,yBAE5BC,EAAgBC,0BCGdC,EALG,WAEhB,OADgBC,qBAAWH,ICgDdI,MAjDf,WACE,IAAMR,EAASM,IAef,SAASG,EAAUC,GACjB,IAAMC,EAAQ,IAAIC,MAClBD,EAAME,IAAMH,EACZC,EAAMG,OAGR,SAASC,EAAoBC,GAC3BhB,EAAOiB,KAAK,eAAgB,CAAEC,QAASF,IAWzC,OA/BAG,qBAAU,WACRC,QAAQC,IAAIrB,EAAOgB,MAClB,CAAChB,IAEJA,EAAOsB,GAAG,WAAW,WACnBF,QAAQC,IAAI,cAAerB,EAAOgB,OAGpChB,EAAOsB,GAAG,QAAQ,SAAAC,GAChBH,QAAQC,IAAI,qBAAsBE,GAClCd,EAAUc,EAAKb,SAajBV,EAAOsB,GAAG,eAAe,SAASE,GAChCJ,QAAQC,IAAI,qBACZ,IAAMI,EAAc,GACpBA,EAAYC,KAAKF,GAEjBf,EADc,iCAA6BkB,OAAOC,KAAKH,QAKvD,yBAAKI,UAAU,OACb,6CAEA,4BAAQC,KAAK,SAASC,QAAS,kBAAMhB,EAAoB,WAAzD,gBAIA,4BAAQe,KAAK,SAASC,QAAS,kBAAMhB,EAAoB,UAAzD,iBCjCAiB,EAAcC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1B9B,QAAQC,IACN,iHAKEkB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBxB,QAAQC,IAAI,sCAGRkB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACLlC,QAAQkC,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,mBJA4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAE/B,OACE,kBAACrD,EAAcsD,SAAf,CAAwBC,MAAO3D,GAC5ByD,KIJL,KACE,kBAAC,EAAD,OAEFG,SAASC,eAAe,SDYnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAI5D,GAAwByB,OAAOO,SAAS6B,MACpDC,SAAWrC,OAAOO,SAAS8B,OAIvC,OAGFrC,OAAOsC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMpC,GAAN,sBAEP8B,IAgEV,SAAiCM,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BhB,OAAOO,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLjC,QAAQC,IACN,oEAvFAuD,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCvB,QAAQC,IACN,iHAMJgB,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.212acfd1.chunk.js","sourcesContent":["import React, { createContext } from \"react\";\nimport io from \"socket.io-client\";\n\nconst socket = io(process.env.API_URL || \"http://localhost:3001\");\n\nexport const SocketContext = createContext();\n\nexport const SocketProvider = ({ children }) => {\n\n  return (\n    <SocketContext.Provider value={socket}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n","import { useContext } from \"react\";\nimport { SocketContext } from \"../context/socketContext\";\n\nconst useSocket = () => {\n  const context = useContext(SocketContext);\n  return context;\n};\n\nexport default useSocket;\n","import React, { useEffect } from \"react\";\nimport useSocket from \"./hooks/useSocket\";\n\nfunction App() {\n  const socket = useSocket();\n\n  useEffect(() => {\n    console.log(socket.id);\n  }, [socket]);\n\n  socket.on(\"connect\", () => {\n    console.log(\"App connect\", socket.id);\n  });\n\n  socket.on(\"play\", data => {\n    console.log(\"receive play event\", data);\n    playAudio(data.path);\n  });\n\n  function playAudio(path) {\n    const audio = new Audio();\n    audio.src = path;\n    audio.play();\n  }\n\n  function handleOnClickStream(id) {\n    socket.emit(\"stream-sound\", { soundId: id });\n  }\n\n  socket.on(\"audio-chunk\", function(chunk) {\n    console.log(\"audio-chunk event\");\n    const audioChunks = [];\n    audioChunks.push(chunk);\n    const audioSrc = `data:audio/mpeg;base64,${window.btoa(audioChunks)}`;\n    playAudio(audioSrc);\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>Hello Client!</h1>\n\n      <button type=\"button\" onClick={() => handleOnClickStream(\"boing\")}>\n        Stream Boing\n      </button>\n\n      <button type=\"button\" onClick={() => handleOnClickStream(\"fuck\")}>\n        Stream Fuck\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SocketProvider } from \"./context/socketContext\";\n\nReactDOM.render(\n  <SocketProvider>\n    <App />\n  </SocketProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}